// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.13;

import {Test, console} from "forge-std/Test.sol";
import {EC, ECPoint1, ECPoint2} from "../src/EC.sol";

contract ECTest is Test {
    EC public ec;

    function setUp() public {
        ec = new EC();
    }

    function test_balanced_equation() external {
        ECPoint1 memory A1 = ECPoint1(
            5178821645910565672220922201419066047313834582062464017871995300450135349785,
            6096316239563403822714440311448537072858938293491657555442190854895557459598
        );
        ECPoint2 memory B2 = ECPoint2(
            [
                12655863807798248507509959606886238124929907487122728709399034898713670280907,
                2311774746858673438991505154229675346577284162095319816860639336259131169615
            ],
            [
                1321176297524315136293895401505374517064983835539274432785271751914854084559,
                10881271420034498224980319668296962650612270401641777566221289546733197021579
            ]
        );
        ECPoint1 memory C1 = ECPoint1(
            1603509502849668903900636861700712616229584332043903260801753005265382215358,
            13896075095750888454923978558516148156482754012427692339998966500223377867716
        );
        uint256 x1 = 33242523462;
        uint256 x2 = 3523523523;
        uint256 x3 = 662526412876821412;

        assertTrue(ec.isBalanced(A1, B2, C1, x1, x2, x3));

        assertFalse(ec.isBalanced(A1, B2, C1, x1, x2 + 1, x3));

        C1 = ECPoint1(
            1603509502849668903900636861700712616229584332043903260801753005265382215358,
            13896075095750888454923978558516148156482754012427692339998966500223377867717
        );

        vm.expectRevert("Pairing failed");
        ec.isBalanced(A1, B2, C1, x1, x2, x3);
    }
}
